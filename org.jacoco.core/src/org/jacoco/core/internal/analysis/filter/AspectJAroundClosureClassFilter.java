/*******************************************************************************
 * Copyright (c) 2009, 2023 Mountainminds GmbH & Co. KG and Contributors
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    Lars Grefer - initial API and implementation
 *
 *******************************************************************************/
package org.jacoco.core.internal.analysis.filter;

import org.objectweb.asm.tree.MethodNode;

import java.util.regex.Pattern;

/**
 * Filters *$AjcClosure42 classes generated by the AspectJ compiler.
 */
public class AspectJAroundClosureClassFilter implements IFilter {

	private static final Pattern AJC_CLOSURE_PATTERN = Pattern
			.compile(".*\\$AjcClosure\\d+");

	@Override
	public void filter(MethodNode methodNode, IFilterContext context,
			IFilterOutput output) {

		if (isAroundClosureClass(context)) {
			output.ignore(methodNode.instructions.getFirst(),
					methodNode.instructions.getLast());
		}
	}

	private boolean isAroundClosureClass(IFilterContext context) {
		return context.getSuperClassName()
				.equals("org/aspectj/runtime/internal/AroundClosure")
				&& AJC_CLOSURE_PATTERN.matcher(context.getClassName())
						.matches();
	}
}
