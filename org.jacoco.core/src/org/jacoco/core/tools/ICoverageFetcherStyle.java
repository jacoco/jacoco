/*******************************************************************************
 * Copyright (c) 2009, 2015 Mountainminds GmbH & Co. KG and Contributors
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Omer Azmon - initial API and implementation
 *
 *******************************************************************************/
package org.jacoco.core.tools;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;

import org.jacoco.core.analysis.CoverageBuilder;
import org.jacoco.core.analysis.IAnalyzer;
import org.jacoco.core.data.ExecutionDataStore;
import org.jacoco.core.data.SessionInfoStore;

/**
 * A style of fetching execution, session, and coverage data.
 */
public interface ICoverageFetcherStyle {
	/**
	 * Read the execution data into an internal data structure.
	 * 
	 * @param dataFile
	 *            the source for the data
	 * 
	 * @throws IOException
	 *             on any failure to read
	 */
	public abstract void loadExecutionData(File dataFile) throws IOException;

	/**
	 * Read the execution data into an internal data structure.
	 * 
	 * @param stream
	 *            the source for the data
	 * 
	 * @throws IOException
	 *             on any failure to read
	 */
	public abstract void loadExecutionData(InputStream stream)
			throws IOException;

	/**
	 * Returns the store containing all the session info loaded.
	 * 
	 * @return the store containing all the session info loaded.
	 */
	public abstract SessionInfoStore getSessionInfoStore();

	/**
	 * Returns the store containing all the execution data loaded.
	 * 
	 * @return the store containing all the execution data loaded.
	 */
	public abstract ExecutionDataStore getExecutionDataStore();

	/**
	 * Returns a coverage builder appropriate for collecting coverage
	 * information generated by analysis information generated by the
	 * {@code IAnalyzer} returned by the {@link #newAnalyzer} method.
	 * 
	 * @return a coverage builder.
	 */
	public abstract CoverageBuilder newCoverageBuilder();

	/**
	 * Returns an analyzer that generates coverage information.
	 * 
	 * @param builder
	 *            a builder appropriate for collecting coverage information
	 *            generated by this analyzer. Usually obtained by invoking the
	 *            {@link #newCoverageBuilder} method of the same implementation.
	 * @return an analyzer.
	 * @throws IOException
	 *             on any failure to read or analyze the data.
	 */
	public abstract IAnalyzer newAnalyzer(CoverageBuilder builder)
			throws IOException;
}